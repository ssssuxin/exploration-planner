<?xml version="1.0" encoding="utf-8"?>
    
<launch>
    
    <arg name="robot_name" default="robot" />
    <arg name="simulator" value="" />
    
    <arg name="respawn_value" default="false" /> <!-- boolean: true, false -->
    
    <arg name="cloud_in" default="cloud_in" /> 

    <!-- arg name="octomap_cloud_in" default="os_cloud_node/points"/-->  <!-- this is NOT actually cleaned from self perceptions and deskewed -->
    <arg name="octomap_cloud_in" default="/lio_sam/deskew/cloud_deskewed"/>  <!-- this is cleaned from self perceptions and deskewed -->

    <!--arg name="octomap_cloud_in2" default="/volumetric_mapping/pointcloud2"/-->   <!-- used for receiving teammate scans -->
    
    <arg name="pcl_out" default="/volumetric_mapping/octomap_pcl" />
    
    <arg name="tf_cache_length" default="10." />

    <arg name="large_radius_for_normals" default="false" />
        
    <!-- scan space time filter -->
    <include file="$(find scan_space_time_filter)/launch/sim_scan_filter_robot.launch" >
          <arg name="cloud_in" value="$(arg octomap_cloud_in)" />
          <arg name="cloud_out" value="filtered_pointcloud" />
    </include>
     
    <!-- octomap_manager from volumetric_mapping package -->
    <node name="volumetric_mapping_$(arg robot_name)" pkg="octomap_world" type="octomap_manager"  respawn="$(arg respawn_value)"  output="screen" >
        <param name = "tf_cache_length" value = "$(arg tf_cache_length)" />
        <param name = "tf_frame" value = "map" />
        <param name = "robot_frame" value = "base_link" />
        <param name = "resolution" value = "0.075" /> <!-- was 0.075, decreased to 0.08 for exploration -->
        
        <param name = "latch_topics" value = "false" /> <!-- in order to avoid recomputing all the visualization markers when there are no subscribers -->
        
        <param name = "map_publish_frequency" value = "1.0" />  <!-- was 0.3 -->
        <param name = "sensor_max_range" value = "15.0" />  <!-- was 20, decreased to 15 for exploration and decreasing memory load -->
        <!-- <param name = "Q" value = "" /> -->
        <!-- <param name = "octomap_file" value = "" /> -->
        <param name = "probability_hit" value = "0.75" />
        <!--param name = "probability_miss" value = "0.2" /-->
        <param name = "probability_miss" value = "0.45" />
        <param name = "threshold_min" value = "0.12" />
        <param name = "threshold_max" value = "0.97" />
        <param name = "threshold_occupancy" value = "0.5" />
        <param name = "filter_speckles" value = "false" />
        <!-- <param name = "visualize_min_z" value = "" /> -->
        <!-- <param name = "visualize_max_z" value = "" /> -->
        <!-- <param name = "full_image_width" value = "" /> -->
        <!-- <param name = "full_image_height" value = "" /> -->
        <!-- <param name = "treat_unknown_as_occupied" value = "true" /> -->
        <!-- <param name = "change_detection_enabled" value = "false" /> -->
        <!-- param name = "dynamics_detection_enabled" value = "true" /> -->
        
        <!-- Input -->
        <remap from = "pointcloud" to = "filtered_pointcloud" />
        <!--remap from = "pointcloud2" to = "$(arg octomap_cloud_in2)" /-->        
        
        <!-- Output -->
        <remap from = "/volumetric_mapping_$(arg robot_name)/octomap_pcl" to = "local_map" />
    </node>

    <!-- normals computation -->
    <include file="$(find path_planner)/launch/sim_compute_normals_robot.launch" >
          <arg name="respawn_value" value="$(arg respawn_value)" />
          <arg name="robot_name" value="$(arg robot_name)" />
          <arg name="large_radius_for_normals" value="$(arg large_radius_for_normals)" />
    </include>
    
</launch>
    
